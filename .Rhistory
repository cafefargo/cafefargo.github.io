?findFN
?findFn
findFn("tree")
install.packages("tree")
library("tree", lib.loc="C:/Users/User/Documents/R/win-library/3.0")
?tree
tree(modFit$finalModel,data=newdata)
tree(modFit,data=newdata)
modFit <- train(Area ~ .,method="rf",data=newdata)
modFit <- train(Area ~ .,method="rf",data=olive)
modFit
modFit$finalModel
tree(modFit,data=newdata)
tree(modFit$finalModel,data=newdata)
pred <-predict(modFit,newdata)
pred
head(olive)
modFit <- train(Area ~ .,method="rpart",data=olive)
pred <-predict(modFit,newdata)
pred
library(rattle)
library(pgmm)
data(olive)
olive = olive[,-1]
library(rattle)
##library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
modFit <- train(Area ~ .,method="rpart",data=olive)
newdata = as.data.frame(t(colMeans(olive)))
pred <-predict(modFit,newdata)
pred
modFit <- train(Area ~ .,method="rf",data=olive)
str(newdata)
newdata
?train
getModelInfo()
modFit2 <- train(Area ~ .,method="regression",data=olive)
modFit <- train(Area ~ .,method="rpart",data=olive)
tree(Area ~.,data=newdata,method="regression",model=modFit)
tree(Area ~.,data=newdata,model=modFit)
tree(Area ~.,data=newdata)
pred <-predict(modFit,newdata)
pred
?prcomp
?sample
?abs
?trainControl
?train
getwd()
setwd("c:\\workspace\\coursera\\predmach\\courseproj")
setwd("c:\\workspace\\coursera\\predmachlearn\\courseproj")
library(caret)
## Ensure the pml-training.csv dataset has been downloaded to the local directory.
## Read in the activity dataset.
pmltraining<-read.csv("pml-training.csv")
pmltest<-read.csv("pml-test.csv")
library(caret)
## Ensure the pml-training.csv dataset has been downloaded to the local directory.
## Read in the activity dataset.
pmltraining<-read.csv("pml-training.csv")
pmltesting<-read.csv("pml-testing.csv")
inTrain <- createDataPartition(y=pmltraining$classe,                               p=0.7, list=FALSE)
training<-pmltraining[inTrain,]
crossv<-pmltraining[-inTrain,]
trainInds <- sample(nrow(training), 3000)
train3000 <- training[trainInds,]
trctrl = trainControl(method = "cv", number = 4,allowParallel=TRUE)
modFit <- train(classe ~ roll_belt + pitch_belt + yaw_belt +               total_acel_belt + gyros_belt_x + gyros_belt_y + gyros_belt_z +               accel_belt_x + accel_belt_y + accel_belt_z + magnet_belt_x +               magnet_belt_y + magnet_belt_z + roll_arm + pitch_arm + yaw_arm +                 total_accel_arm + gyros_arm_x + gyros_arm_y + gyros_arm_z +                 accel_arm_x + accel_arm_y + accel_arm_z + magnet_arm_x +               magnet_arm_y + magnet_arm_z + roll_dumbbell + pitch_dumbbell +                 yaw_dumbbell + total_accel_dumbbell + gyros_dumbbell_x +                 gyros_dumbbell_y + gyros_dumbbell_z +accel_dumbbell_x +                 accel_dumbbell_y + accel_dumbbell_z + magnet_dumbbell_x +                 magnet_dumbbell_y + magnet_dumbbell_z + roll_forearm +                 pitch_forearm + yaw_forearm + total_accel_forearm + gyros_forearm_x +                 gyros_forearm_y + gyros_forearm_z + accel_forearm_x +                 accel_forearm_y + accel_forearm_z + magnet_forearm_x +                 magnet_forearm_y + magnet_forearm_z,method="rf",data=train3000,trControl = trctrl)
modFit <- train(classe ~ roll_belt + pitch_belt + yaw_belt +               total_accel_belt + gyros_belt_x + gyros_belt_y + gyros_belt_z +               accel_belt_x + accel_belt_y + accel_belt_z + magnet_belt_x +               magnet_belt_y + magnet_belt_z + roll_arm + pitch_arm + yaw_arm +                 total_accel_arm + gyros_arm_x + gyros_arm_y + gyros_arm_z +                 accel_arm_x + accel_arm_y + accel_arm_z + magnet_arm_x +               magnet_arm_y + magnet_arm_z + roll_dumbbell + pitch_dumbbell +                 yaw_dumbbell + total_accel_dumbbell + gyros_dumbbell_x +                 gyros_dumbbell_y + gyros_dumbbell_z +accel_dumbbell_x +                 accel_dumbbell_y + accel_dumbbell_z + magnet_dumbbell_x +                 magnet_dumbbell_y + magnet_dumbbell_z + roll_forearm +                 pitch_forearm + yaw_forearm + total_accel_forearm + gyros_forearm_x +                 gyros_forearm_y + gyros_forearm_z + accel_forearm_x +                 accel_forearm_y + accel_forearm_z + magnet_forearm_x +                 magnet_forearm_y + magnet_forearm_z,method="rf",data=train3000,trControl = trctrl)
modFit$finalModel
modFit
modFit <- train(classe ~ roll_belt + pitch_belt + yaw_belt +               total_accel_belt + gyros_belt_x + gyros_belt_y + gyros_belt_z +               accel_belt_x + accel_belt_y + accel_belt_z + magnet_belt_x +               magnet_belt_y + magnet_belt_z + roll_arm + pitch_arm + yaw_arm +                 total_accel_arm + gyros_arm_x + gyros_arm_y + gyros_arm_z +                 accel_arm_x + accel_arm_y + accel_arm_z + magnet_arm_x +               magnet_arm_y + magnet_arm_z + roll_dumbbell + pitch_dumbbell +                 yaw_dumbbell + total_accel_dumbbell + gyros_dumbbell_x +                 gyros_dumbbell_y + gyros_dumbbell_z +accel_dumbbell_x +                 accel_dumbbell_y + accel_dumbbell_z + magnet_dumbbell_x +                 magnet_dumbbell_y + magnet_dumbbell_z + roll_forearm +                 pitch_forearm + yaw_forearm + total_accel_forearm + gyros_forearm_x +                 gyros_forearm_y + gyros_forearm_z + accel_forearm_x +                 accel_forearm_y + accel_forearm_z + magnet_forearm_x +                 magnet_forearm_y + magnet_forearm_z,method="rf",data=training,trControl = trctrl)
modFit
modFit3000 <- train(classe ~ roll_belt + pitch_belt + yaw_belt +               total_accel_belt + gyros_belt_x + gyros_belt_y + gyros_belt_z +               accel_belt_x + accel_belt_y + accel_belt_z + magnet_belt_x +               magnet_belt_y + magnet_belt_z + roll_arm + pitch_arm + yaw_arm +                 total_accel_arm + gyros_arm_x + gyros_arm_y + gyros_arm_z +                 accel_arm_x + accel_arm_y + accel_arm_z + magnet_arm_x +               magnet_arm_y + magnet_arm_z + roll_dumbbell + pitch_dumbbell +                 yaw_dumbbell + total_accel_dumbbell + gyros_dumbbell_x +                 gyros_dumbbell_y + gyros_dumbbell_z +accel_dumbbell_x +                 accel_dumbbell_y + accel_dumbbell_z + magnet_dumbbell_x +                 magnet_dumbbell_y + magnet_dumbbell_z + roll_forearm +                 pitch_forearm + yaw_forearm + total_accel_forearm + gyros_forearm_x +                 gyros_forearm_y + gyros_forearm_z + accel_forearm_x +                 accel_forearm_y + accel_forearm_z + magnet_forearm_x +                 magnet_forearm_y + magnet_forearm_z,method="rf",data=training3000,trControl = trctrl)
modFit3000 <- train(classe ~ roll_belt + pitch_belt + yaw_belt +               total_accel_belt + gyros_belt_x + gyros_belt_y + gyros_belt_z +               accel_belt_x + accel_belt_y + accel_belt_z + magnet_belt_x +               magnet_belt_y + magnet_belt_z + roll_arm + pitch_arm + yaw_arm +                 total_accel_arm + gyros_arm_x + gyros_arm_y + gyros_arm_z +                 accel_arm_x + accel_arm_y + accel_arm_z + magnet_arm_x +               magnet_arm_y + magnet_arm_z + roll_dumbbell + pitch_dumbbell +                 yaw_dumbbell + total_accel_dumbbell + gyros_dumbbell_x +                 gyros_dumbbell_y + gyros_dumbbell_z +accel_dumbbell_x +                 accel_dumbbell_y + accel_dumbbell_z + magnet_dumbbell_x +                 magnet_dumbbell_y + magnet_dumbbell_z + roll_forearm +                 pitch_forearm + yaw_forearm + total_accel_forearm + gyros_forearm_x +                 gyros_forearm_y + gyros_forearm_z + accel_forearm_x +                 accel_forearm_y + accel_forearm_z + magnet_forearm_x +                 magnet_forearm_y + magnet_forearm_z,method="rf",data=train3000,trControl = trctrl)
modFit3000
modFit
crossvPred<-predict(modFit,crossv)
crossvPred
postResample(crossvPred, crossv$classe)
confusionMatrix(crossvPred, crossv$classe)
confusemat<-confusionMatrix(crossvPred, crossv$classe)
confusemat$overall[1]
str(confusemat)
head(confusemat)
crossvaccuracy<-postResample(crossvPred, crossv$classe)
crossvaccuracy
crossvaccuracy[1]
confusemat$overall[1]
str(crossvaccuracy)
1-as.numeric(crossvaccuracy[1])
crossvPred
?rep
str(crossvPred)
qplot(crossvPred, color=crossvPred)
testPred<-predict(modFit,pmltesting)
testaccuracy<-postResample(testPred, pmltraining$classe)
testPred
confusionMatrix(testPred, pmltraining$classe)
modFit
crossvaccuracy
confusemat$overall[1]
errorate
errorrate
errorrate<-1-as.numeric(crossvaccuracy[1])
errorrate
str(modFit)
modFit$Accuracy
modFit$accuracy
modFit$results
modFit
modFit$results[2]
modFit$results[2,1]
modFit$results[2,2]
crossvaccuracy
crossvaccuracy$1
str(crossvaccuracy)
crossvaccuracy[,1]
crossvaccuracy[1,1]
crossvaccuracy[1]
print errorrate
print(errorrate)
print(crossvaccuracy[1])
qplot(crossvPred, color=crossvPred,main="Predicted counts of each classe type in Cross Validation dataset",xlab="classe type",ylab="classe Type count")
source('C:/Workspace/Coursera/PredMachLearn/CourseProj/peerass.R')
qplot(crossvPred, color=crossvPred,main="Predicted counts of each classe type in Cross Validation dataset",xlab="classe type",ylab="classe Type count")
print(qplot(crossvPred, color=crossvPred,main="Predicted counts of each classe type in Cross Validation dataset",xlab="classe type",ylab="classe Type count"))
print(qplot(crossv$classe, color=classe,main="Actual counts of each classe type in Cross Validation dataset",xlab="classe type",ylab="classe Type count"))
print(qplot(crossv$classe, color=crossv$classe,main="Actual counts of each classe type in Cross Validation dataset",xlab="classe type",ylab="classe Type count"))
qplot(crossvPred, color=crossvPred,main="Predicted counts of each classe type in Cross Validation dataset",xlab="classe type",ylab="classe Type count")
?train
?trainControl
?createDataPartition
?predict
?postResample
?qplot
crossvaccuracy[1]
modFit$results[2,2]
errorate
errorrate
detach("package:AppliedPredictiveModeling", unload=TRUE)
detach("package:brew", unload=TRUE)
library("brew", lib.loc="C:/Users/User/Documents/R/win-library/3.0")
library("AppliedPredictiveModeling", lib.loc="C:/Users/User/Documents/R/win-library/3.0")
1-as.numeric(modFit$results[2,2])
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rtools")
install.packages("rtools")
install.packages("shiny")
library(shiny)
> runExample("01_hello")
runExample("01_hello")
getWD()
getwd()
setwd("c:\\workspace\\coursera\\devdataprod")
getwd()
runApp()
library(rtools)
install.packages("rtools")
install.packages("rtools")
library("shiny", lib.loc="~/R/win-library/3.1")
getwd()
runApp()
choose()
choose
?choose
choose(2,1)
factorial(3)
lbeat(2)
lbeta(2)
lbeta(2,1)
choose(3,-1)
choose(3,4)
choose(3,3)
choose(3,1)
choose(3,0)
choose(6,3)
choose(6,.2)
choose(6,.9)
choose(6,-1.1)
as.integer(1.1)
as.integer(1.5)
as.integer(1.6)
as.integer(round(1.6)
)
as.integer(round(1.6))
as.integer(round(-1.6))
round(1.6)
?round
choose(6,7)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
choose(3,2)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
choose(9,99)
choose(99,0)
choose(9,-1)
choose(9,9)
choose(9,98)
shiny::runApp()
shiny::runApp()
install.packages("devtools")
library("devtools", lib.loc="~/R/win-library/3.1")
install.packages("slidify")
install.packages("slidify")
install.packages("slidify")
install.packages("slidify")
library("devtools", lib.loc="~/R/win-library/3.0")
library("devtools", lib.loc="~/R/win-library/3.0")
install.packages("slidify")
install.packages("rtools")
install.packages("rtools")
install.packages("rtools")
library("devtools", lib.loc="~/R/win-library/3.0")
find_rtools()
find_rtools()
install.packages("slidify")
find_slidify()
find_rtools()
library("devtools", lib.loc="~/R/win-library/3.1")
find_rtools()
install.packages("slidfy")
R.home()
pkgs <- c("slidify", "slidifyLibraries", "rCharts")
install_github(pkgs, 'ramnathv', ref = 'dev')
install.packages("base64enc")
install_github(pkgs, 'ramnathv', ref = 'dev')
library("base64enc", lib.loc="~/R/win-library/3.1")
detach("package:base64enc", unload=TRUE)
library("base64enc", lib.loc="~/R/win-library/3.1")
install_github(pkgs, 'ramnathv', ref = 'dev')
library("slidifyLibraries", lib.loc="~/R/win-library/3.1")
library("slidify", lib.loc="~/R/win-library/3.1")
author("courseproject")
slidify("index.html")
getwd()
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
runApp()
library("shiny", lib.loc="~/R/win-library/3.1")
library("slidify", lib.loc="~/R/win-library/3.1")
library("slidifyLibraries", lib.loc="~/R/win-library/3.1")
library("devtools", lib.loc="~/R/win-library/3.1")
runApp()
getwd()
setwd("C:\\Workspace\\Coursera\\DevDataProd")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library("devtools", lib.loc="~/R/win-library/3.1")
library("shiny", lib.loc="~/R/win-library/3.1")
runApp()
shiny::runApp()
choose(5,6)
choose(6,5)
choose(2,6)
shiny::runApp()
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shiny::runApp()
shinyapps::setAccountInfo(name='cafefargo', token='AF395858D9E1947F7A6ECA2AB408047D', secret='SiyGowPirkDpsZHwPg6uuMuBIzkRyB9usGEjdq2P')
deployApp()
shiny::runApp()
library("devtools", lib.loc="~/R/win-library/3.1")
library("shiny", lib.loc="~/R/win-library/3.1")
library("shinyapps", lib.loc="~/R/win-library/3.1")
?hr
shiny::runApp()
shinyapps::setAccountInfo(name='cafefargo', token='AF395858D9E1947F7A6ECA2AB408047D', secret='SiyGowPirkDpsZHwPg6uuMuBIzkRyB9usGEjdq2P')
deployApp()
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
library("devtools", lib.loc="~/R/win-library/3.1")
library("shiny", lib.loc="~/R/win-library/3.1")
library("shinyapps", lib.loc="~/R/win-library/3.1")
library("knitr", lib.loc="~/R/win-library/3.1")
detach("package:knitr", unload=TRUE)
install.packages("library")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
library("shiny", lib.loc="~/R/win-library/3.1")
library("shinyapps", lib.loc="~/R/win-library/3.1")
shinyapps::setAccountInfo(name='cafefargo', token='AF395858D9E1947F7A6ECA2AB408047D', secret='SiyGowPirkDpsZHwPg6uuMuBIzkRyB9usGEjdq2P')
deployApp()
shiny::runApp()
deployApp()
library("devtools", lib.loc="~/R/win-library/3.1")
deployApp()
shiny::runApp()
shiny::runApp()
deployApp()
lm(I(child-mean(child)~I(parent-mean(parent))-1, data=galton)
)
galton
data(galton)
dataset(galton)
library(UsingR)
library(usingR)
install.packages("UsingR")
lm(I(child-mean(child)~I(parent-mean(parent))-1, data=galton)
)
data(galton)
data(diamond)
library("UsingR", lib.loc="~/R/win-library/3.1")
data(diamond)
data(galton)
lm(I(child-mean(child)~I(parent-mean(parent))-1, data=galton))
data(anscombe)
example(anscombe)
library("devtools", lib.loc="~/R/win-library/3.1")
library("shiny", lib.loc="~/R/win-library/3.1")
library("shinyapps", lib.loc="~/R/win-library/3.1")
shiny::runApp()
setwd("c:\\shinytest")
shiny::runApp('C:/shinytest')
shiny::runApp('C:/shinytest')
shiny::runApp('C:/shinytest')
shiny::runApp('C:/shinytest')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='cafefargo', token='AF395858D9E1947F7A6ECA2AB408047D', secret='SiyGowPirkDpsZHwPg6uuMuBIzkRyB9usGEjdq2P')
deployApp()
setwd("c:\\workspace\\coursera\\Devdataprod")
shinyapps::setAccountInfo(name='cafefargo', token='AF395858D9E1947F7A6ECA2AB408047D', secret='SiyGowPirkDpsZHwPg6uuMuBIzkRyB9usGEjdq2P')
deployApp()
setwd("c:\\workspace\\coursera\\DevDataProd")
getwd()
shiny::runApp('C:/Workspace/Coursera/DevDataProd')
shinyapps::setAccountInfo(name='cafefargo', token='AF395858D9E1947F7A6ECA2AB408047D', secret='SiyGowPirkDpsZHwPg6uuMuBIzkRyB9usGEjdq2P')
deployApp()
terminateApp(DevDataProd)
terminateApp("DevDataProd")
deployApp()
shiny::runApp('C:/Workspace/Coursera/DevDataProd')
getwd()
setwd("c:\\workspace\\coursera\\DevDataProd\\myshinyapp")
shiny::runApp('C:/Workspace/Coursera/DevDataProd/myshinyapp')
deployApp()
shiny::runApp('C:/Workspace/Coursera/DevDataProd/myshinyapp')
shiny::runApp('C:/Workspace/Coursera/DevDataProd/myshinyapp')
shiny::runApp('C:/Workspace/Coursera/DevDataProd/myshinyapp')
shiny::runApp('C:/Workspace/Coursera/DevDataProd/myshinyapp')
shiny::runApp('C:/Workspace/Coursera/DevDataProd/myshinyapp')
shiny::runApp('C:/Workspace/Coursera/DevDataProd/myshinyapp')
shiny::runApp('C:/Workspace/Coursera/DevDataProd/myshinyapp')
shiny::runApp('C:/Workspace/Coursera/DevDataProd/myshinyapp')
shiny::runApp('C:/Workspace/Coursera/DevDataProd/myshinyapp')
deployApp()
shiny::runApp('C:/Workspace/Coursera/DevDataProd/myshinyapp')
shiny::runApp('C:/Workspace/Coursera/DevDataProd/myshinyapp')
shinyapps::setAccountInfo(name='cafefargo', token='AF395858D9E1947F7A6ECA2AB408047D', secret='SiyGowPirkDpsZHwPg6uuMuBIzkRyB9usGEjdq2P')
deployApp()
getwd()
choose(1.5,1.2)
?round
shiny::runApp('C:/Workspace/Coursera/DevDataProd/myshinyapp')
as,integer(1.2)
as.integer(1.2)
as.integer(1.5)
round(1.5)
round(1.2)
shiny::runApp('C:/Workspace/Coursera/DevDataProd/myshinyapp')
deployApp()
choose(-9,6)
?choose
?abs
shiny::runApp('C:/Workspace/Coursera/DevDataProd/myshinyapp')
abs(-2.5)
round(2.5)
round(2.6)
round(1.5)
round(2.5)
round(2.51)
round(abs(-2.55))
shiny::runApp('C:/Workspace/Coursera/DevDataProd/myshinyapp')
shiny::runApp('C:/Workspace/Coursera/DevDataProd/myshinyapp')
shiny::runApp('C:/Workspace/Coursera/DevDataProd/myshinyapp')
deployApp()
---
slidify("index.Rmd")
library("slidify", lib.loc="~/R/win-library/3.1")
getwd()
setwd("c:\\workspace\\coursera\\DevDataProd\\courseproject)
setwd("c:\\workspace\\coursera\\DevDataProd\\courseproject")
slidify("index.Rmd")
browse("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
getwd()
publish_github(cafefargo,DevDataProd-Slidify)
publish_github("cafefargo"","DevDataProd-Slidify")
publish_github("cafefargo","DevDataProd-Slidify")
publish_github(cafefargo,"DevDataProd-Slidify")
publish_github("cafefargo","DevDataProd-Slidify")
publish_github("cafefargo","https://github.com/cafefargo/DevDataProd-Slidify")
publish_github("cafefargo","DevDataProd-Slidify")
install.packages("rstudioapi")
preview
Preivew
Preview
library("rstudio", lib.loc="~/R/win-library/3.1")
Preview
preview
